#!/usr/bin/perl -w
# refactor init.pp into pieces
# 
# splay an init file full of subclasses into a directory hierarchy
# so "class foo::bar::mumble" is declared in file manifests/foo/bar/mumble.pp
# instead of in manifests/init.pp

use strict;
use warnings;

# check usage
my $pname = $0;
$pname =~ s(.*/)();
my $module = $ARGV[0] or die "usage: $pname modulename\n";

# do all the work inside manifests, to keep paths short.
chdir("$module/manifests"); 

# new_filename "class foo::bar::mumble::frabitz {"
#   or "define foo::bar::mumble::frabitz {"
#   -> foo/bar/mumble/frabitz.pp
#
sub new_filename {
  my $f = shift;
  chomp $f;
  $f =~ s/^(class|define)[^:]*::(.*)/$2/ ;  # trim 'class' and leading component
  $f =~ s/[{(]//;	# trim brace
  $f =~ s/\s+.*//;	# trim whitepace
  $f =~ s(::)(/)g;	# turn :: into path separators
  $f =~ s/$/.pp/;	# add the .pp
  $f;		# and we're done
}

# create_dir_for "foo/bar/mumble/frabitz.pp"
#   -> mkdir -p foo/bar/mumble
#
sub create_dir_for {
  my $d = shift;
  chomp $d;
  $d = `dirname $d`;
  system("[ -d '$d' ] || mkdir -p $d") == 0 or die "can't make directory $d: $!\n";
}

# just copy old to new for starters
my $filename="init.pp.new";
open (OUT, ">$filename") or die "Couldn't open output file $filename: $!\n";

open(IN, 'init.pp') or die "can't open";
while(<IN>) {
  # each subclass definition redirects output to a new .pp file
  if (/^(class|define)[^:]*::.*/) {
    $filename = new_filename($_);
	create_dir_for $filename if $filename =~ m(/);
	close OUT;
    open (OUT, ">$filename") or die "Couldn't open output file $filename: $!\n";
  }
  print OUT;
}

close OUT;

# No change?  Clean up and get out.
system("cmp -s init.pp init.pp.new && rm init.pp.new") == 0 and exit 0;

# Change?  Save the old init.pp just in case.
rename("init.pp", "init.pp.bak") or die "Couldn't rename init.pp to init.pp.bak: $!\n";
rename("init.pp.new", "init.pp") or die "Couldn't rename init.pp.new to init.pp: $!\n";
